
  
  import pl.logicsynergy.common.SwfObject;
  import pl.logicsynergy.components.mdi.View;
  import pl.logicsynergy.components.ui.UiCommon;
  import pl.logicsynergy.components.ui.UiMessageBox;
  import pl.logicsynergy.skins.TextInputDecimalSkin;
  import pl.logicsynergy.utils.StringUtils;
  import pl.logicsynergy.utils.UiUtils;
  
@UiDesign(formName = "Typy liczników", guid = "formName=Typy liczników")
public class YOURCLASSNAME extends null 
{
  /** Konstruktor */
  public YOURCLASSNAME()
  {
	UiCreator.getInstance(self).executeXML();
  }

  public  lblMeter2Digit;

  public TextInput txtMeter1MinNo;

  public  lblMeter1Digit;

  public TextInput txtMeter2MinNo;

  public  ncData;

  public TextInput txtMeter2No;

  public ComboBox cbMeterKind;

  public TextInput txtMeter1No;


  ViewTypeCounter;
  ViewTypeHeatCounter;
  ViewTypeWaterCounter;
  ViewTypePairTemperatureSensor;
  ViewTypeFlowCounter;
  
  private Object m_viewList =
    {
      I:{FRM:"eMediaUiNetwork.frm", FUNC:"pl.logicsynergy.ui.network.meter.ViewTypeIntegrator"},
      L:{FRM:"eMediaUiNetwork.frm", FUNC:"pl.logicsynergy.ui.network.meter.ViewTypeCounter"},
      C:{FRM:"eMediaUiNetwork.frm", FUNC:"pl.logicsynergy.ui.network.meter.ViewTypeHeatCounter"},
      W:{FRM:"eMediaUiNetwork.frm", FUNC:"pl.logicsynergy.ui.network.meter.ViewTypeWaterCounter"},
      T:{FRM:"eMediaUiNetwork.frm", FUNC:"pl.logicsynergy.ui.network.meter.ViewTypePairTemperatureSensor"},
      P:{FRM:"eMediaUiNetwork.frm", FUNC:"pl.logicsynergy.ui.network.meter.ViewTypeFlowCounter"}
    };
      /** Aktualnie załądowany widok*/
  private View m_currentView = null;
  
                  /** Nadpisana metoda load z klasy bazowej */
  @Override
  public void load(FlexEvent event)
  {
    super.load();
    
    cbMeterKind.addItem("I", "I - Integrator");
    cbMeterKind.addItem("L", "L - Licznik");
    cbMeterKind.addItem("C", "C - Ciepłomierz");
    cbMeterKind.addItem("W", "W - Wodomierz");
    cbMeterKind.addItem("T", "T - Para czujników temperatur");
    cbMeterKind.addItem("P", "P - Przepływomierz");
    
    
    cbMeterKind.addEventListener(BaseEvent.VALUE_CHANGED, event -> cbMeterKindChanged(event));
    
    txtMeter1No.addEventListener(BaseEvent.VALUE_CHANGED, event -> txtMeter1NoChanged(event));
    txtMeter1MinNo.addEventListener(BaseEvent.VALUE_CHANGED, event -> txtMeter1NoChanged(event));
    
    txtMeter2No.addEventListener(BaseEvent.VALUE_CHANGED, event -> txtMeter2NoChanged(event));
    txtMeter2MinNo.addEventListener(BaseEvent.VALUE_CHANGED, event -> txtMeter2NoChanged(event));
  }
  
  private void txtMeter1NoChanged(BaseEvent event)
  {
    lblMeter1Digit.text = getDigitLabel(txtMeter1No.getValue(), txtMeter1MinNo.getValue());
  }
  
  private void txtMeter2NoChanged(BaseEvent event)
  {
    lblMeter2Digit.text = getDigitLabel(txtMeter2No.getValue(), txtMeter2MinNo.getValue());
  }
  
  private String getDigitLabel(String meterNo, String  precisionNo)
  {
    Number no = Integer.valueOf(meterNo);
    if (isNaN(no))
      no = 0;
    
    Number precision = Integer.valueOf(precisionNo);
    if (isNaN(precision))
      precision = 0;
    
    String digit = "";
    while (no-- > 0)
      digit += "0";
    
    if (precision > 0)
      digit += ",";
    
    while (precision-- > 0)
      digit += "0";
    
    return digit;
  }
  
  private void cbMeterKindChanged(BaseEvent event)
  {
    View oldView = m_currentView;
    m_currentView =  getView(cbMeterKind.getValue());
    if(m_currentView == null) //załadowanie
    {
      if (oldView)
        ncData.removeElement(oldView);
      
      loadView(cbMeterKind.getValue());
    }
    else if (oldView && oldView.className != m_currentView.className)
    {
      ncData.removeElement(oldView);
      ncData.addElement(m_currentView);
    }
    else if (!oldView)
      ncData.addElement(m_currentView);
  }
  
  private * getView(String meterKind)
  {
    Object o = m_viewList[meterKind];
    if(o == null)
      return null;
    
    return o["VIEW"];
  }
  
  private void loadView(String meterKind)
  {
    Object o = m_viewList[meterKind];
    if(o == null)
      return;
    
    String frm = o["FRM"];
    String func = o["FUNC"];
    
                  
    SwfObject frm = new SwfObject(this.stage);
    frm.addResponder(new mx.rpc.Responder(createModalClassResult, showFaultEvent));
    frm.CreateObject(frm,func);
  }
  private void createModalClassResult(Object data)
  {
    m_currentView = UiCommon.getObject(data) as View;
    if (m_currentView == null)
      return;
    
    m_currentView.getDBManager().= grid.getDBManager().
    ncData.addElement(m_currentView);
    Object o = m_viewList[cbMeterKind.getValue()];
    o.VIEW = m_currentView;
  }

  
  private void showFaultEvent(FaultEvent event)
  {
    UiMessageBox.show(this, "Błąd ładowania widoku", "Uwaga");
  }
  
                  @Override
  public void menuItemClick(MenuEvent event)
  {
    XML xml = event.item as XML;
    if (xml == null)
      return;
    
    Boolean stopPropagation = true;
    switch (xml.@id.toString())
    {
      case "DEFAULT_VALUE_CONFIG":
        if(grid.getDBManager().getRecordCount() < 1)
        {
          UiMessageBox.show(this, "Brak wybranego typu licznika", "Komunikat");
          break;
        }
        
        FrmDefaultValue frm = new FrmDefaultValue();
        frm.meterTypeId = grid.getValue("ID");
        frm.openInContent(UiUtils.getContent(this));
        break;
      default:
        stopPropagation = false;
        break;
    }
    
    if (!stopPropagation)
      super.menuItemClick(event);
  }
  
                  ]]>

                  <fx:Declarations>
                  <db:DBQuery id="dbQuery" sqlFrom="Network_MeterType"
            sqlField="{dbField/**
 * Zwrócenie obiektu DBQuery dla tabeli XXXXXX
 * 
 * @return From XXXXXX
 */
 public DBQuery dbQuery()
 {
    DBQuery result = new DBQuery();
    result.sqlFrom="Network_MeterType";
    result.sqlOrderBy="Id";
    result.sqlIdentityColumn="Id";
 }

/**
 * Zwrócenie obiektu DBQuery dla tabeli XXXXXX
 * 
 * @return From XXXXXX
 */
 public DBQuery dbDescMeterProducer()
 {
    DBQuery result = new DBQuery();
    result.sqlFrom="Network_MeterProducer";
    result.sqlOrderBy="Symbol";
    result.sqlIdentityColumn="Id";
 }

/*
	 * Metoda wyciągająca nazwy pól z XMLa
	 * 
	 * @return obiekt Element zawierający nazwy pól
	 */
	 private Element null()
	 {
		return XMLUtils.getXMLElement("        <field name="Id" dataField="ID" displayText="Id" width="100"/>        <field name="Symbol" dataField="SYMBOL" displayText="Symbol" width="100"/>        <field name="Name" dataField="NAME" displayText="Nazwa" width="100"/>        <field name="Description" dataField="DESCRIPTION" displayText="Opis" width="250"/>        <field name="Meter1No" dataField="METER_1_NO" displayText="Liczba cyfr liczydła 1" width="100"/>        <field name="Meter1MinNo" dataField="METER_1_MIN_NO" displayText="L. cyfr po ',' liczydła 1" width="100"/>        <field name="Meter2No" dataField="METER_2_NO" displayText="Liczba cyfr liczydła 2" width="100"/>        <field name="Meter2MinNo" dataField="METER_2_MIN_NO" displayText="L. cyfr po ',' liczydła 2" width="100"/>        <field name="Meter1MaxValue" dataField="METER_1_MAX_VALUE" displayText="Maksymalna wartość dla liczydła 1" width="100"/>        <field name="Meter2MaxValue" dataField="METER_2_MAX_VALUE" displayText="Maksymalna wartość dla liczydła 2" width="100"/>        <field name="MeterKind" dataField="METER_KIND" displayText="Rodzaj" width="100"/>        <field name="MeterProducerId" dataField="METER_PRODUCER_ID" displayText="Id producenta" width="50"/>        <field name="ViewSwfName" dataField="VIEW_SWF_NAME" displayText="Biblioteka swf" width="150"/>        <field name="ViewClassName" dataField="VIEW_CLASS_NAME" displayText="Klasa formularza" width="150"/>                <field name="FlowNominal" dataField="FLOW_NOMINAL" displayText="Przepływ nominalny" width="-1"/>        <field name="FlowMin" dataField="FLOW_MIN" displayText="Przepływ minimalny" width="-1" />        <field name="FlowMid" dataField="FLOW_MID" displayText="Przepływ pośredni" width="-1"/>        <field name="FlowMax" dataField="FLOW_MAX" displayText="Przepływ maksymalny" width="-1"/>                <field name="DailyLoadMin" dataField="DAILY_LOAD_MIN" displayText="Minimalne dzienne obciążenie" width="-1" />        <field name="DailyLoadMax" dataField="DAILY_LOAD_MAX" displayText="Maksymalne dzienne obciążenie" width="-1" />                <field name="MeterKindId" dataField="METER_KIND_ID"  displayText="Id rodzaju" width="-1"/>        <field name="TempMax" dataField="TEMP_MAX" displayText="Maksymalna temperatura pracy" width="-1"/>        <field name="WorkTimeCountType" dataField="WORK_TIME_COUNT_TYPE"  displayText="Sposób liczenia czasu pracy" width="-1"/>                <field name="DiameterNominal" dataField="DIAMETER_NOMINAL" displayText="Średnica nominalna" width="-1"/>        <field name="DiameterMin" dataField="DIAMETER_MIN" displayText="Średnica przyłączeniowa od" width="-1"/>        <field name="DiameterMax" dataField="DIAMETER_MAX" displayText="Średnica przyłączeniowa do" width="-1"/>                        <field name="MeterInstallId" dataField="METER_INSTALL_ID"  displayText="Id miejsca instalacji" width="-1"/>        <field name="UnitId" dataField="UNIT_ID"  displayText="Id jednostki licznika" width="-1"/>                <field name="CanMeasureHeatPoint" dataField="CAN_MEASURE_HEAT_POINT"  displayText="Możliwość pomiaru - ciepło chwilowe" width="-1"/>        <field name="CanMeasureHeatMax" dataField="CAN_MEASURE_HEAT_MAX"  displayText="Możliwość pomiaru - ciepło maksymalne" width="-1"/>        <field name="CanMeasureHeatOver" dataField="CAN_MEASURE_HEAT_OVER"  displayText="Możliwość pomiaru - przekroczenia mocy" width="-1"/>        <field name="CanMeasureConsumptionHeatOver" dataField="CAN_MEASURE_CONSUMPTION_HEAT_OVER"  displayText="Możliwość pomiaru - zużycia przy przekroczenia mocy" width="-1"/>        <field name="CanMeasureFlowHeatOver" dataField="CAN_MEASURE_FLOW_HEAT_OVER"  displayText="Możliwość pomiaru - przepływu przy przekroczenia mocy" width="-1"/>        <field name="CanMeasureFlowPoint" dataField="CAN_MEASURE_FLOW_POINT"  displayText="Możliwość pomiaru - przepływ chwilowy" width="-1"/>        <field name="CanMeasureFlowMax" dataField="CAN_MEASURE_FLOW_MAX"  displayText="Możliwość pomiaru - przepływ maksymalny" width="-1"/>        <field name="CanMeasureCapacity" dataField="CAN_MEASURE_CAPACITY"  displayText="Możliwość pomiaru - objętość" width="-1"/>        <field name="CanMeasureTempSupply" dataField="CAN_MEASURE_TEMP_SUPPLY"  displayText="Możliwość pomiaru - temperatura zasilania" width="-1"/>        <field name="CanMeasureTempReturn" dataField="CAN_MEASURE_TEMP_RETURN"  displayText="Możliwość pomiaru - temperatura powrotu" width="-1"/>                <field name="MeterDeviceCode1" dataField="METER_DEVICE_CODE_1" displayText="Kod licznika powiązanego nr 1" width="-1"/>        <field name="MeterDeviceCode2" dataField="METER_DEVICE_CODE_2" displayText="Kod licznika powiązanego nr 2" width="-1"/>        <field name="MeterDeviceCode3" dataField="METER_DEVICE_CODE_3" displayText="Kod licznika powiązanego nr 3" width="-1"/>        <field name="MeterDeviceCode4" dataField="METER_DEVICE_CODE_4" displayText="Kod licznika powiązanego nr 4" width="-1"/>                <field name="MeterTempSensorTypeId" dataField="METER_TEMP_SENSOR_TYPE" displayText="Id rodzaju czujnika temp." width="-1"/>        <field name="MeterPowerTypeId" dataField="METER_POWER_TYPE_ID" displayText="Id sposobu zasilania" width="-1"/>      </fields>); }


  }

AddMethods
                  <fx:XML id="menuEx" xmlns="">
  <menu xmlNodePosition="-1">
    <menuitem id="OPTIONS" labelName="Opcje" xmlNodePosition="6" enabledInWriteMode='false'>
      <meuitem id="DEFAULT_VALUE_CONFIG" labelName="Konfiguracja wartości domyślnych"/>
    </menuitem>
  </menu>
                  </fx:XML>
                  
                  </fx:Declarations>
                  <s:VGroup id="grMain" left="0" right="0" top="0" bottom="25" minWidth="780">
                  <s:HGroup width="100%">
  <c:TextInput id="txtSymbol" width="40" label="Symbol" columnName="Symbol"
                  dataField="SYMBOL" dbProvider="{grid.dbManager}"/>
  <c:TextInput id="txtName" width="100%" label="Nazwa" columnName="Name"
                  dataField="NAME" dbProvider="{grid.dbManager}"/>
                  </s:HGroup>
                  
                  <s:HGroup width="100%">
  <c:ComboBox id="cbMeterKind" label="Rodzaj" width="220"
                columnName="MeterKind"
                dataField="METER_KIND" dbProvider="{grid.dbManager}"/>
  <c:DatabaseField id="dbfMeterProducer" width="100%" label="Producent" columnName="MeterProducerId" dataField="METER_PRODUCER_ID" dbProvider="{grid.dbManager}"
                  idField="Id" sqlTable="Network_MeterProducer" descField="[Symbol] | [Name]" dbDescQuery="{dbDescMeterProducer}"
                  swfClassName="pl.logicsynergy.ui.common.FrmDictionary" swfFile="eMediaUiCommon.swf"
                  dataExchange="{{'dbQuery.sqlTable':'Network_MeterProducer', 'dbQuery.sqlFrom':'Network_MeterProducer', formName:'Producent licznika', type: 1 }}"
                  />
                  </s:HGroup>
                  <s:TabBar id="tbMain" width="100%" height="25" dataProvider="{vcTab}"/>
                  <mx:ViewStack id="vcTab" width="100%" height="100%" creationPolicy="all" minHeight="300">
  <s:NavigatorContent id="ncMain" width="100%" height="100%" label="Dane ogólne">
    <s:VGroup id="grMainData" width="100%">
      <c:Panel id="pMeter1" width="100%" height="55"
                  label="Licznik 1" dbProvider="{grid.dbManager}">
        <s:HGroup width="100%" paddingLeft="5" paddingRight="5" paddingTop="15" verticalAlign="middle">
          <c:TextInput id="txtMeter1No" width="80" label="Liczba cyfr" restrict="0-9" columnName="Meter1No"
                  dataField="METER_1_NO" dbProvider="{grid.dbManager}"/>
          <c:TextInput id="txtMeter1MinNo" width="80" label="L. cyfr po ','" restrict="0-9" columnName="Meter1MinNo"
                  dataField="METER_1_MIN_NO" dbProvider="{grid.dbManager}"
                  skinClass="pl.logicsynergy.skins.TextInputSkin"/>
          <s:Label id="lblMeter1Digit" fontSize="18" fontWeight="bold" width="140" textAlign="center" maxDisplayedLines="1"/>
          <c:TextInput id="txtMeter1MaxValue" width="100%" label="Maksymalna wartość" restrict="0-9" columnName="Meter1MaxValue"
                  dataField="METER_1_MAX_VALUE" dbProvider="{grid.dbManager}"
                  skinClass="pl.logicsynergy.skins.TextInputSkin"/>
          
        </s:HGroup>
      </c:Panel>
      
      <c:Panel id="pMeter2" width="100%" height="55"
                  label="Licznik 2" dbProvider="{grid.dbManager}">
        <s:HGroup width="100%" paddingLeft="5" paddingRight="5" paddingTop="15" verticalAlign="middle">
          <c:TextInput id="txtMeter2No" width="80" label="Liczba cyfr" restrict="0-9" columnName="Meter2No"
                  dataField="METER_2_NO" dbProvider="{grid.dbManager}"/>
          <c:TextInput id="txtMeter2MinNo" width="80" label="L. cyfr po ','" restrict="0-9" columnName="Meter2MinNo"
                  dataField="METER_2_MIN_NO" dbProvider="{grid.dbManager}"
                  skinClass="pl.logicsynergy.skins.TextInputSkin"/>
          <s:Label id="lblMeter2Digit" fontSize="18" fontWeight="bold" width="140" textAlign="center" maxDisplayedLines="1"/>
          <c:TextInput id="txtMeter2MaxValue" width="100%" label="Maksymalna wartość" restrict="0-9" columnName="Meter2MaxValue"
                  dataField="METER_2_MAX_VALUE" dbProvider="{grid.dbManager}"
                  skinClass="pl.logicsynergy.skins.TextInputSkin"/>
        </s:HGroup>
      </c:Panel>
      
      <c:TextArea id="txtaDescription" width="100%" height="80" label="Opis"
                  columnName="Description" dataField="DESCRIPTION" dbProvider="{grid.dbManager}" />
    </s:VGroup>
  </s:NavigatorContent>
  <s:NavigatorContent id="ncData" width="100%" height="100%" label="Dane typu">
    
  </s:NavigatorContent>
  
                  </mx:ViewStack>
                  </s:VGroup>
</ui:UiDictionary>
}