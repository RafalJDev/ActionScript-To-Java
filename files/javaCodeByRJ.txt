import logica.data.DataMap;
import pl.logicsynergy.annotations.UiDesign;
import pl.logicsynergy.components.ComboBox;
import pl.logicsynergy.components.mdi.View;
import pl.logicsynergy.creator.UiCreator;
import pl.logicsynergy.database.DBQuery;


  import pl.logicsynergy.common.GridModes;
  import pl.logicsynergy.components.ui.UiMessageBox;
  import pl.logicsynergy.database.DBManager;
  import pl.logicsynergy.events.DBEvent;
  import pl.logicsynergy.ro.ROManager;
  import pl.logicsynergy.ro.ROUiEventService;
  import pl.logicsynergy.skins.ui.UiDictionaryComponentSkin;
  import pl.logicsynergy.ui.gis.order.FrmOrderPosition;
  import pl.logicsynergy.ui.gis.resources.TaskResourceType;
  import pl.logicsynergy.ui.gis.task.FrmTask;
  import pl.logicsynergy.ui.gis.task.FrmTaskRelation;
  import pl.logicsynergy.ui.gis.task.FrmTaskResource;
  import pl.logicsynergy.ui.gis.task.components.TaskRelation;
  import pl.logicsynergy.ui.gis.task.components.TaskToAction;
  import pl.logicsynergy.ui.gis.task.components.TaskToAttachment;
  import pl.logicsynergy.ui.gis.task.components.TaskToDocumentType;
  import pl.logicsynergy.ui.gis.task.components.TaskToMaterial;
  import pl.logicsynergy.ui.gis.task.components.TaskToOther;
  import pl.logicsynergy.utils.MenuUtils;
  import pl.logicsynergy.utils.StringUtils;
  import pl.logicsynergy.utils.UiUtils;

      /** Czy zadanie typu plan*/
@UiDesign(formName = "null", guid = "null")
public class YOURCLASSNAME extends null 
{
  /** Konstruktor */
  public YOURCLASSNAME()
  {
	UiCreator.getInstance(self).executeXML();
  }

  public  gtbTask;

  public Button btnFromPlan;

  public  gridTask;



  [Bindable]
  private DBManager getDbManager();

  public Boolean showButtonMove = false;
  public String additionalSqlWhere = null;

                  /** Nadpisana metoda load z klasy bazowej */
      public void load(FlexEvent event)
  {
    dbTaskQuery.sqlWhereAdditional = "IsValid = 1 And IsPlan = " + isPlan;
    if (!StringUtils.isNullOrEmpty(additionalSqlWhere))
      dbTaskQuery.sqlWhereAdditional += " And " + additionalSqlWhere;

    if (isPlan == 0 && showButtonMove)
    {
      btnFromPlan.visible = true;
      btnFromPlan.includeInLayout = true;
    }

    gridTask.addEventListener("columnCreated", event -> gridColumnCreated(event))
    gridTask.open();

    gridTask.checkInsertAccessFunction = taskInsertFunction;
    gridTask.checkModifyAccessFunction = taskModifyFunction;
    gridTask.addEventListener(MouseEvent.DOUBLE_CLICK, event -> gridTaskDoubleClick(event));
    gridTask.deleteFunction = gridDeleteFunction;

    gtbTask.deleteIcon.toolTip = "Usuń zadanie (ustaw jako nieważne)";
    gridTask.addEventListener(DBEvent.RIGHT_CLICK, event -> gridRightClick(event));
  }

  private void gridColumnCreated(BaseEvent event)
  {
    setTaskWhere();
  }

  private void gridDeleteFunction(Object data)
  {
    if(gridTask.getDBManager().getRecordCount() == 0)
    {
      UiMessageBox.show(this, "Brak zadań do usunięcia", "Komunikat");
      return;
    }

    UiMessageBox.showYESNO(this, "Czy usunąć zadanie?", "Komunikat", setInValidessageClose);
  }

  private void setInValidessageClose(Object o)
  {
    if (o["DialogResult"] != "YES")
      return;

                  DataMap dataMap = ROUiEventService.call("logica.uiservice.gis.Task", "setInvalid", {ID : gridTask.getValue("ID")});
       onSetInvalidResul()
  }

  private void onSetInvalidResult(ResultEvent event)
  {
    Object data = event.result;
    if (!ROUiEventService.isResultOk(this, data))
      return;

    gridTask.refresh();
  }

  public void set.getDBManager().DBManager value)
  {
    getDbManager() = value;
    if (getDbManager())
    {
      setTaskWhere();
      getDbManager().addEventListener(DBEvent.CHANGE_CURRENT_INDEX, event ->.getDBManager().hangeCurrentIndex(event));
      getDbManager().addEventListener(DBEvent.MODE_CHANGED, event ->.getDBManager().hangeMode(event));
      getDbManager().addEventListener(ResultEvent.RESULT, event ->.getDBManager().oadResult(event));
    }
  }

  private Boolean taskInsertFunction()
  {
    if (!getDbManager())
      return false;

                  orderId* = getDbManager().getCurrentValue("ID");

    if (orderId == null)
    {
      UiMessageBox.show(this, "Brak id zlecenia", "Komunikat");
      return false;
    }

    String sqlQuery = "Select Count(1), Max(StartDate), Max(EndDate) From GIS_Task Where OrderId = ?";
    Array params = [];
    params.push(orderId);

                  DataMap dataMap = ROUiEventService.call("logica.uiservice.db.DatabaseManager", "getValueTable", sqlQuery, params);
       onGetTaskDateDat()
    return false;
  }

  private void onGetTaskDateData(ResultEvent event)
  {
    Object data = event.result;
    if (!ROUiEventService.isResultOk(this, data))
      return;

                  orderId* = getDbManager().getCurrentValue("ID");

    Array values = data["VALUE"];

    FrmTask frm = new FrmTask();
    frm.setStyle("skinClass", UiDictionaryComponentSkin);
    frm.getMode()AfterLoad = 1;
    frm.closeAfterSave = true;
    frm.dataExchange["dbQuery.sqlWhere"] = "1=0";
    frm.dataExchange["dbfOrder.enabledInEditMode"] = false;
    frm.dataExchange["dbfOrder.enabledInNewMode"] = false;
    frm.dataExchange["dbfOrder.defaultValue"] = orderId;
    frm.dataExchange["chbIsPlan.defaultValue"] = isPlan;
    frm.dataExchange["chbIsPlan.visible"] = false;
    frm.dataExchange["chbIsPlan.includeInLayout"] = false;
    frm.dataExchange["formName"] = "Zadanie do zlecenia o id " + orderId + (isPlan == 1 ? " (plan)" : " (realizacja)");

    if (values[0] < 1)
      frm.dataExchange["dfStartDate.defaultValue"] = getDbManager().getCurrentValue("START_DATE");
    else
      frm.dataExchange["dfStartDate.defaultValue"] = values[2];

    frm.openInContent(UiUtils.getContent(this), onResult);
  }

  private Boolean taskModifyFunction()
  {
    if (!getDbManager())
      return false;

    int taskId = gridTask.getValue("ID");

    FrmTask frm = new FrmTask();
    frm.setStyle("skinClass", UiDictionaryComponentSkin);
    frm.dataExchange["dbQuery.sqlWhere"] = "Id = " + taskId
    frm.dataExchange["dbfOrder.enabledInEditMode"] = false;
    frm.dataExchange["dbfOrder.enabledInNewMode"] = false;
    frm.dataExchange["chbIsPlan.visible"] = false;
    frm.dataExchange["chbIsPlan.includeInLayout"] = false;
    frm.dataExchange["formName"] = "Zadanie o id " + taskId + (isPlan == 1 ? " (plan)" : " (realizacja)");
    frm.getMode()AfterLoad = 2;
    frm.closeAfterSave = true;
    frm.openInContent(UiUtils.getContent(this), onResult);

    return false;
  }

  private void onResult(Object o)
  {
    if (o["DialogResult"] != "OK")
      return;

    if(o["CURRENT_ID"] != null)
    {
      gridTask.getDBManager().addEventListener(ResultEvent.RESULT, event -> function loadResult(event:ResultEvent(event)):void
      {
        gridTask.getDBManager().removeEventListener(ResultEvent.RESULT, loadResult);

        Array fields = new Array();
        fields.push({FIELD: "ID", VALUE: o["CURRENT_ID"]});
        gridTask.getDBManager().find2(fields);
        gridTask.getDBManager().addEventListener(DBEvent.FIND,function findDataResult(event:DBEvent(event)):void
        {
          gridTask.getDBManager().getCurrentIndex() = event.getRecordCount();
        });

        gridTask.getDBManager().addEventListener(DBEvent.FAULT, event -> function findDataFault(event:Event(event)):void { }(event));

      });
    }

    gridTask.refresh();
    dispatchEvent(new Event("saveResult"));
  }

  private void gridTaskDoubleClick(BaseEvent event)
  {
    if (!getDbManager())
      return;

                  taskId* = gridTask.getValue("ID");
    if(taskId == null)
      return;

    FrmTask frm = new FrmTask();
    frm.setStyle("skinClass", UiDictionaryComponentSkin);
    frm.dataExchange["dbfOrder.enabledInEditMode"] = false;
    frm.dataExchange["dbfOrder.enabledInNewMode"] = false;
    frm.dataExchange["dbQuery.sqlWhere"] = "Id = " + taskId;
    frm.dataExchange["chbIsPlan.visible"] = false;
    frm.dataExchange["chbIsPlan.includeInLayout"] = false;
    frm.dataExchange["formName"] = "Zadanie o id " + taskId + (isPlan == 1 ? " (plan)" : " (realizacja)");
    frm.openInContent(UiUtils.getContent(this));
  }

  private void.getDBManager().hangeCurrentIndex(BaseEvent event)
  {
    setTaskWhere();
  }

  private void.getDBManager().hangeMode(BaseEvent event)
  {
    setTaskGrid();
  }

  private void.getDBManager().oadResult(BaseEvent event)
  {
    setTaskGrid();
  }

  private void setTaskWhere()
  {
    if (!getDbManager() || !gridTask || !gridTask.columnCreated)
      return;

    String sqlWhere = "1=0";
                  orderId* = getDbManager().getCurrentValue("ID");

    if(getDbManager().getRecordCount() > 0 && orderId != null && getDbManager().getMode() != 1)
      sqlWhere = "OrderId = " + orderId;

    if(sqlWhere == gridTask.getDBManager().SQLQuery.sqlWhere)
      return;

    gridTask.getDBManager().SQLQuery.sqlWhere = sqlWhere;
    if(gridTask.getMode() != 0)
      gridTask.cancelSave();

    gridTask.refresh();
  }

  private void setTaskGrid()
  {
    if(getDbManager().getMode() == GridModes.ADD || getDbManager().getRecordCount() < 1)
    {
      gtbTask.readOnly = true;

      if(gridTask.getMode() != GridModes.VIEW)
        gridTask.cancelSave();
    }
    else if(getDbManager().getRecordCount() > 0 && gtbTask.readOnly)
      gtbTask.readOnly = false;
  }

  protected void btnFromPlanClickHandler(MouseEvent event)
  {
                  orderId* = getDbManager().getCurrentValue("ID");
    if(orderId == null)
    {
      UiMessageBox.show(this, "Nie zostało wybrane zlecenie", "Komunikat");
      return;
    }

    FrmOrderPosition frm = new FrmOrderPosition();
    frm.dataExchange["formName"] = "Plan zlecenia o id " + orderId;
    frm.isPlan = 1
    frm.openInContent(UiUtils.getContent(this), frmGetPlanResult);
    frm.tOrderPosition.additionalSqlWhere = "NOT EXISTS (select 1 From Gis_Task t Where t.IsValid = 1 And t.PlanTaskId = GIS_Task.Id)";
    frm.getDBManager().= getDbManager();
    frm.setInsertSelectedMode();
  }

  private void frmGetPlanResult(Object o)
  {
    if(o["DialogResult"] != "OK")
      return;

                  DataMap dataMap = ROUiEventService.call("logica.uiservice.gis.Order", "moveFromPlan", {ORDER_ID : _dbManager.getCurrentValue("ID"), TASK_PLAN_ID_LIST : o["SELECTED_ID_LIST"]});
       onMoveResul()
  }

  private void onMoveResult(ResultEvent event)
  {
    Object data = event.result;
    if(!ROUiEventService.isResultOk(this, data))
      return;

    gridTask.refresh();
  }

  private void gridRightClick(BaseEvent event)
  {
    if (gridTask.getDBManager().getRecordCount() < 1)
      return;

    XML myMenu =
      <menu>
        <menu id="SHOW_ACTION" labelName="Czynności"/>
        <menu id="SHOW_USER_TEAM" labelName="Zespoły"/>
        <menu id="SHOW_USER" labelName="Osoby"/>
        <menu id="SHOW_EQUIPMENT" labelName="Sprzęt/pojazdy"/>
        <menu id="SHOW_MATERIAL" labelName="Materiał"/>
        <menu id="SHOW_OTHER" labelName="Inne/dodatkowe"/>
        <menu id="SHOW_DOCUMENT_TYPE" labelName="Wymagane dokumenty"/>
        <menu id="SHOW_ATTACHMENT" labelName="Załączniki"/>
      </menu>;

    Menu menu = Menu.createMenu(null, myMenu, false);
    menu.labelField="@labelName";

    menu.addEventListener(MenuEvent.ITEM_CLICK, event -> rightMenuItemClick(event));
    Point p = this.localToGlobal(new Point(event.mouseEvent.localX, event.mouseEvent.localY));
    menu.x = event.mouseEvent.stageX;
    menu.y = event.mouseEvent.stageY;
    if (menu.y > stage.height / 2)
      menu.y = event.mouseEvent.stageY - menu.height;

    MenuUtils.show(menu);

    DisplayObject sbRoot = systemManager.topLevelSystemManager.getSandboxRoot();
    sbRoot.addEventListener(MouseEvent.RIGHT_MOUSE_DOWN,
      void mouseDownOutside(MouseEvent event)
      {
        menu.hide()
        sbRoot.removeEventListener(MouseEvent.RIGHT_MOUSE_DOWN, mouseDownOutside);
      },
      false, 0, true);

    event.stopPropagation();
  }

  public void rightMenuItemClick(BaseEvent event)
  {
    XML xml = event.item as XML;
    if (xml == null)
      return;

    switch (xml.@id.toString())
    {
      case "SHOW_ACTION":
        showTaskRelation(new TaskToAction(), "czynności");
        break;
      case "SHOW_USER_TEAM":
        showTaskResource(TaskResourceType.USER_TEAM, "zespoły");
        break;
      case "SHOW_USER":
        showTaskResource(TaskResourceType.USER, "osoby");
        break;
      case "SHOW_EQUIPMENT":
        showTaskResource(TaskResourceType.EQUIPMENT, "sprzęt/pojazdy");
        break;
      case "SHOW_MATERIAL":
        showTaskRelation(new TaskToMaterial(), "materiały");
        break;
      case "SHOW_OTHER":
        showTaskRelation(new TaskToOther(), "inne/dodatkowe");
        break;
      case "SHOW_DOCUMENT_TYPE":
        showTaskRelation(new TaskToDocumentType(), "wymagane typu dokumentów");
        break;
      case "SHOW_ATTACHMENT":
        showTaskRelation(new TaskToAttachment(), "załączniki");
        break;
    }
  }

  private void showTaskResource(int resourceType, String  name)
  {
                  taskId* = gridTask.getValue("ID");
    if (taskId == null)
    {
      UiMessageBox.show(this, "Brak wybranego zadania", "Komunikat");
      return;
    }

    FrmTaskResource frm = new FrmTaskResource();
    frm.taskId = taskId;
    frm.resourceType = resourceType;
    frm.dataExchange["formName"] = "Zadanie o id " + taskId + " - " + name;
    frm.openInContent(UiUtils.getContent(this));
  }

  private void showTaskRelation(TaskRelation taskRelation, String  name)
  {
                  taskId* = gridTask.getValue("ID");
    if (taskId == null)
    {
      UiMessageBox.show(this, "Brak wybranego zadania", "Komunikat");
      return;
    }

    FrmTaskRelation frm = new FrmTaskRelation();
    frm.taskId = taskId;
    frm.taskRelation = taskRelation;
    frm.dataExchange["formName"] = "Zadanie o id " + taskId + " - " + name;
    frm.openInContent(UiUtils.getContent(this));
  }
                  ]]>

                  <fx:Declarations>

                  <db:DBQuery id="dbTaskQuery" sqlFrom="GIS_Task"
            sqlField="{dbTaskField/**
 * Zwrócenie obiektu DBQuery dla tabeli XXXXXX
 * 
 * @return From XXXXXX
 */
 public DBQuery dbTaskQuery()
 {
    DBQuery result = new DBQuery();
    result.sqlFrom="GIS_Task";
    result.sqlField="{dbTaskField}";
    result.sqlOrderBy="Id";
    result.sqlIdentityColumn="Id";
    return result;
 }

/*
	 * Metoda wyciągająca nazwy pól z XMLa
	 * 
	 * @return obiekt Element zawierający nazwy pól
	 */
	 private Element null()
	 {
		return XMLUtils.getXMLElement("        <field name="Id" dataField="ID" displayText="Id" width="100"/>
        <field name="Name" dataField="NAME" displayText="Nazwa" width="150"/>
        <field name="StartDate" dataField="START_DATE" displayText="Data rozpoczęcia" width="130" type="date" dateTimePattern="yyyy-MM-dd HH:mm"/>
        <field name="EndDate" dataField="END_DATE" displayText="Data zakończenia" width="130" type="date" dateTimePattern="yyyy-MM-dd HH:mm"/>
        <field name="(Select Sum(ExecutionTime) From (select executionTime From GIS_TaskToUserTeam where TaskId = GIS_Task.Id union all Select ExecutionTime From GIS_TaskToUser Where TaskId = GIS_Task.Id union all Select ExecutionTime From GIS_TaskToEquipment Where TaskId = GIS_Task.Id) TSK)" dataField="EXECUTION_TIME" displayText="Czas realizacji (h;min)" width="120" type="timeCount" bindable="false"/>
        <field name="ObjectCode" dataField="OBJECT_CODE" displayText="Kod obiektu" width="100"/>
        <field name="OrderId" dataField="ORDER_ID" displayText="Id zlecenia" width="-1"/>

        <field name="Description" dataField="DESCRIPTION" displayText="Opis" width="250"/>
      </fields>
); }


  }

AddMethods

                  </fx:Declarations>
                  <c:VGroup width="100%" height="100%">
                  <c:Label id="lbl" text="Lista zadań"/>
                  <c:HGroup width="100%" verticalAlign="middle">
  <grid:GridToolBar id="gtbTask" width="100%"
                  grid="{gridTask}" />
  <c:Button id="btnFromPlan" label="Dodaj z planu" fontWeight="bold" visible="false" includeInLayout="false"
            click="btnFromPlanClickHandler(event)"/>
                  </c:HGroup>
                  <grid:Grid id="gridTask" width="100%" height="100%" showErrorMessage="false"
                  
                  SQLQuery="{dbTaskQuery}"/>
                  </c:VGroup>
</c:Group>
}