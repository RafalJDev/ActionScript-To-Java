package files.input;

import pl.logicsynergy.components.ui.UiMessageBox;
import pl.logicsynergy.database.DBManager;
import pl.logicsynergy.events.DBEvent;
import pl.logicsynergy.events.MDIEvent;
import pl.logicsynergy.ro.ROManager;
import pl.logicsynergy.ro.ROUiEventService;
import pl.logicsynergy.utils.StringUtils;
import pl.logicsynergy.validator.NipValidator;
import pl.logicsynergy.validator.PeselValidator;
import pl.logicsynergy.validator.RegonValidator;

import logica.data.DataMap;
import pl.logicsynergy.components.TextInput;
import pl.logicsynergy.events.BaseEvent;

@UiDesign(formName = "Dane", guid = "54BCCED1")
public class FrmMeterTypeFlash extends UiMDITab 
{

  public TextInput txtPESEL;

  public TextInput txtNIP;

  public TextInput txtREGON;

  /** Konstruktor */
  public FrmMeterTypeFlash()
  {
	UiCreator.getInstance(self).executeXML();
  }

      private int _checkNipPeselRegonTimer = 0;
      /** Flagi wskazujące na to czy istnieje rekord z pesel/nip/regon */
      private Object _customerWithSomethingElseExists = {};

  /** Nadpisana metoda load z klasy bazowej */
  @Override
  public void load(FlexEvent event)
      {
        super.load();
      }

  @Override
  protected void mdiMainSetDbManager(MDIEvent event)
      {
        super.mdiMainSetDbManager(event);
        setEvents();
      }

      private void setEvents()
      {
        txtPESEL.addEventListener(BaseEvent.VALUE_CHANGED, event -> checkNipPeselRegon(event));
        txtNIP.addEventListener(BaseEvent.VALUE_CHANGED, event -> checkNipPeselRegon(event));
        txtREGON.addEventListener(BaseEvent.VALUE_CHANGED, event -> checkNipPeselRegon(event));

        _dbManager.addEventListener(DBEvent.BEGIN_SAVE, event -> gridDbManagerBeginSave(event));
        _dbManager.addEventListener(DBEvent.SAVE_RESULT, event -> gridDbManagerSaveResult(event));
        _dbManager.addEventListener(DBEvent.SAVE_FAULT, event -> gridDbManagerSaveResult(event));
      }

  @Override
  public void set dbManager(DBManager value)
      {
        super.setDbManager(value);
        setEvents();
      }

      protected void checkNipPeselRegon(BaseEvent event)
      {
        if (_dbManager.getMode() == 0)
          return;

        // co należy sprawdzić, czyli id pola tekstowego
        String componentId = event.target["id"];

        clearTimeout(_checkNipPeselRegonTimer);
        _checkNipPeselRegonTimer = setTimeout(checkIfCustomerExists, 500, componentId);
      }

      /** Sprawdzenie czy istnieje kontrahent z podanym... (PESEL/NIP/REGON w zależności od pola). Sprawdzamy tylko jedno pole na raz.
       Object @param checkWhat - id pola do sprawdzenia
       Object/
      protected void checkIfCustomerExists(String componentId)
      {
        _customerWithSomethingElseExists[componentId] = false;

        String sqlWhere = "Active=1";
        Array sqlParams = [];

        if (componentId == "txtPESEL" && !StringUtils.isNullOrEmpty(txtPESEL.value))
        {
          sqlWhere += " And Pesel=? ";
          sqlParams.push(StringUtil.trim(txtPESEL.getValue() as String));
        }

        if (componentId == "txtNIP" && !StringUtils.isNullOrEmpty(txtNIP.value))
        {
          sqlWhere += " And NIP=? ";
          sqlParams.push(StringUtil.trim(txtNIP.getValue() as String));
        }

        if (componentId == "txtREGON" && !StringUtils.isNullOrEmpty(txtREGON.value))
        {
          sqlWhere += " And Regon=? ";
          sqlParams.push(StringUtil.trim(txtREGON.getValue() as String));
        }

        if (sqlParams.length() < 1)  // nie było zmiany w kontrolkach
          return;

        if(_dbManager.getMode() == 2) //podczas modyfikacji rekordu pominąć rekordy modyfikowanego kontrahenta
        {
          Object customerCode = _dbManager.getCurrentValue("CODE");
          if(customerCode != null)
          {
            sqlWhere += " And Code <> ?";
            sqlParams.push(customerCode);
          }
        }

        Object data = {
          // sprawdź ilość rekordów, dodaj jeszcze id pola sprawdzanego, tak abyśmy mogli dowiedzieć się co za pole uległo sprawdzaniu
          "Select":   "count(1) as CNT, '" + componentId + "' as CHECKEDFIELD",
            "From":     "Common_Customer",
            "Where":    sqlWhere,
            "PARAMS":   sqlParams
        };

      }

      private void checkCustomerExistsResult(ResultEvent event)
      {
        Object data = event.result;
          return;

        int cnt = data["DataTable"][0]["CNT"];
        String field = data["DataTable"][0]["CHECKEDFIELD"];
        if (cnt > 0)
          _customerWithSomethingElseExists[field] = true; // rekord istnieje
      }

      protected void gridDbManagerBeginSave(BaseEvent event)
      {
        Array fields = [];
        if (!PeselValidator.validate(txtPESEL.getValue() as String))
          fields.push(" PESEL");
        if (!NipValidator.validate(txtNIP.getValue() as String))
          fields.push(" NIP");
        if (!RegonValidator.validate(txtREGON.getValue() as String))
          fields.push(" REGON");

        Array customerExistsMsg = [];
        for (String field : _customerWithSomethingElseExists)
        {
          if (_customerWithSomethingElseExists[field])
            customerExistsMsg.push(field.replace("txt", " ").toUpperCase());
        }

        // jeśli są błędy, nie pozwól na zapis, usuń listenera i wyświetl okienko z pytaniem o potwierdzenie
        if (fields.length() > 0 || customerExistsMsg.length() > 0)
        {
          _dbManager.setAllowSave(false);
          Object o =  {"TextField" : fields[0]};

          Array msg = [];
          if (fields.length() > 0)
            msg.push("Nieprawidłowe wartości pól: " + fields + ".");
          if (customerExistsMsg.length() > 0)
            msg.push("Istnieje już kontrahent z podanym numerem: " + customerExistsMsg + ".");

          msg.push("Czy chcesz zatwierdzić wprowadzanie rekordu?");

          UiMessageBox.showYESNO(this, msg.join("\n\n"), "Błędna walidacja pól", onValidationMessage, o);
        }
      }

      private void onValidationMessage(Object data)
      {
        _dbManager.setAllowSave(true);
        if (data && data["DialogResult"] != "YES")
          return;

        // potwierdzenie zapisu rekordu mimo niepoprawnych wartości NIP/PESEL/REGON
        _dbManager.removeEventListener(DBEvent.BEGIN_SAVE, gridDbManagerBeginSave);
        _dbManager.save();
        _dbManager.getMode() = 0;

        // przywróć listenera nasłuchującego na beginsave
        _dbManager.addEventListener(DBEvent.BEGIN_SAVE, event -> gridDbManagerBeginSave(event));
      }

      protected void gridDbManagerSaveResult(BaseEvent event)
      {
        // po zapisie rekordu wyczyść flagi
        _customerWithSomethingElseExists = {};
      }

/**
 * Zwrócenie obiektu DBQuery dla tabeli Common_CustomerConsultant
 * 
 * @return From Common_CustomerConsultant
 */
 public DBQuery dbConsultant()
 {
    DBQuery result = new DBQuery();
    result.sqlFieldString="Id, Symbol , Name";
    result.sqlFrom="Common_CustomerConsultant";
    result.sqlOrderBy="Id";
    result.sqlIdentityColumn="Id";
    return result;
 }

/**
 * Zwrócenie obiektu DBQuery dla tabeli Common_CustomerDataSource
 * 
 * @return From Common_CustomerDataSource
 */
 public DBQuery dbDataSource()
 {
    DBQuery result = new DBQuery();
    result.sqlFieldString="Id, Symbol , Name";
    result.sqlFrom="Common_CustomerDataSource";
    result.sqlOrderBy="Id";
    result.sqlIdentityColumn="Id";
    return result;
 }

/**
 * Zwrócenie obiektu DBQuery dla tabeli Common_CustomerStatus
 * 
 * @return From Common_CustomerStatus
 */
 public DBQuery dbStatus()
 {
    DBQuery result = new DBQuery();
    result.sqlFieldString="Id, Symbol , Name";
    result.sqlFrom="Common_CustomerStatus";
    result.sqlOrderBy="Id";
    result.sqlIdentityColumn="Id";
    return result;
 }

/**
 * Zwrócenie obiektu DBQuery dla tabeli Common_Customer
 * 
 * @return From Common_Customer
 */
 public DBQuery dbCustomer()
 {
    DBQuery result = new DBQuery();
    result.sqlFieldString="Id, Symbol , Name";
    result.sqlFrom="Common_Customer";
    result.sqlOrderBy="Id";
    result.sqlIdentityColumn="Id";
    return result;
 }

/**
 * Zwrócenie obiektu DBQuery dla tabeli Common_GroupCustomer1
 * 
 * @return From Common_GroupCustomer1
 */
 public DBQuery dbGroupCustomer1()
 {
    DBQuery result = new DBQuery();
    result.sqlFieldString="Id, Symbol, Name, Description";
    result.sqlFrom="Common_GroupCustomer1";
    result.sqlOrderBy="Id";
    result.sqlIdentityColumn="Id";
    return result;
 }

/**
 * Zwrócenie obiektu DBQuery dla tabeli Common_GroupCustomer2
 * 
 * @return From Common_GroupCustomer2
 */
 public DBQuery dbGroupCustomer2()
 {
    DBQuery result = new DBQuery();
    result.sqlFieldString="Id, Symbol, Name, Description";
    result.sqlFrom="Common_GroupCustomer2";
    result.sqlOrderBy="Id";
    result.sqlIdentityColumn="Id";
    return result;
 }

/**
 * Zwrócenie obiektu DBQuery dla tabeli Common_GroupCustomer3
 * 
 * @return From Common_GroupCustomer3
 */
 public DBQuery dbGroupCustomer3()
 {
    DBQuery result = new DBQuery();
    result.sqlFieldString="Id, Symbol, Name, Description";
    result.sqlFrom="Common_GroupCustomer3";
    result.sqlOrderBy="Id";
    result.sqlIdentityColumn="Id";
    return result;
 }

	 /**
	 * Zwrócenie DataMap dla komponentu dbfGroup1
	 *
	 * @return Data Exchange
	 */
	 public DataMap getDbfGroup1()
	 {
	   DataMap dataMap = new DataMap();
	   dataMap.put(type, "1");
	   dataMap.put(dbQuery.sqlTable, "Common_GroupCustomer1");
	   dataMap.put(dbQuery.sqlFrom, "Common_GroupCustomer1");
	   dataMap.put(formName, "Grupa podziału I");
	   return dataMap;
	 }

	 /**
	 * Zwrócenie DataMap dla komponentu dbfGroup2
	 *
	 * @return Data Exchange
	 */
	 public DataMap getDbfGroup2()
	 {
	   DataMap dataMap = new DataMap();
	   dataMap.put(type, "1");
	   dataMap.put(dbQuery.sqlTable, "Common_GroupCustomer2");
	   dataMap.put(dbQuery.sqlFrom, "Common_GroupCustomer2");
	   dataMap.put(formName, "Grupa podziału II");
	   return dataMap;
	 }

	 /**
	 * Zwrócenie DataMap dla komponentu dbfGroup3
	 *
	 * @return Data Exchange
	 */
	 public DataMap getDbfGroup3()
	 {
	   DataMap dataMap = new DataMap();
	   dataMap.put(type, "1");
	   dataMap.put(dbQuery.sqlTable, "Common_GroupCustomer3");
	   dataMap.put(dbQuery.sqlFrom, "Common_GroupCustomer3");
	   dataMap.put(formName, "Grupa podziału III");
	   return dataMap;
	 }

	 /**
	 * Zwrócenie DataMap dla komponentu dbfCustomerConsultant
	 *
	 * @return Data Exchange
	 */
	 public DataMap getDbfCustomerConsultant()
	 {
	   DataMap dataMap = new DataMap();
	   dataMap.put(type, "1");
	   dataMap.put(dbQuery.sqlTable, "Common_CustomerConsultant");
	   dataMap.put(dbQuery.sqlFrom, "Common_CustomerConsultant");
	   dataMap.put(formName, "Opiekunowie kontrahentów");
	   return dataMap;
	 }

}

    <db:DBQuery id="dbConsultant" sqlFieldString="Id, Symbol , Name"
                sqlFrom="Common_CustomerConsultant"
sqlFrom="Common_CustomerConsultant"

    <db:DBQuery id="dbDataSource" sqlFieldString="Id, Symbol , Name"
                sqlFrom="Common_CustomerDataSource"
sqlFrom="Common_CustomerDataSource"

    <db:DBQuery id="dbStatus" sqlFieldString="Id, Symbol , Name"
                sqlFrom="Common_CustomerStatus"
sqlFrom="Common_CustomerStatus"

    <db:DBQuery id="dbCustomer" sqlFieldString="Id, Symbol , Name"
                sqlFrom="Common_Customer"
sqlFrom="Common_Customer"

    <db:DBQuery id="dbGroupCustomer1" sqlFieldString="Id, Symbol, Name, Description"
                sqlFrom="Common_GroupCustomer1"
sqlFrom="Common_GroupCustomer1"

    <db:DBQuery id="dbGroupCustomer2" sqlFieldString="Id, Symbol, Name, Description"
                sqlFrom="Common_GroupCustomer2"
sqlFrom="Common_GroupCustomer2"

    <db:DBQuery id="dbGroupCustomer3" sqlFieldString="Id, Symbol, Name, Description"
                sqlFrom="Common_GroupCustomer3"
sqlFrom="Common_GroupCustomer3"

    <c:VGroup id="groupMain" width="100%" height="100%">
      <c:HGroup width="100%" minWidth="600">
        <c:TextInput id="txtPESEL" width="25%" label="Pesel" dataField="PESEL"
                     columnName="Pesel" dbProvider="{getDbManager}"/>
        <c:TextInput id="txtNIP" width="25%" label="NIP" dataField="NIP"
                     columnName="Nip" dbProvider="{getDbManager}"/>
        <c:TextInput id="txtREGON" width="25%" label="REGON" dataField="REGON"
                     columnName="Regon" dbProvider="{getDbManager}"/>
        <c:TextInput id="txtFamilyName" width="25%" label="Nazwisko rodowe" columnName="FamilyName"
                     dataField="FAMILY_NAME" dbProvider="{getDbManager}"/>
      </c:HGroup>
      <c:HGroup width="100%" minWidth="600">
        <c:TextInput id="txtFirstName" width="25%" label="Imię" columnName="FirstName"
                     dataField="FIRST_NAME" dbProvider="{getDbManager}"/>
        <c:TextInput id="txtLastName" width="25%" label="Nazwisko"
                     columnName="LastName" dataField="LAST_NAME" dbProvider="{getDbManager}"/>
        <c:TextInput id="txtFatherName" width="25%" label="Imię ojca"
                     columnName="FatherName" dataField="FATHER_NAME" dbProvider="{getDbManager}"/>
        <c:TextInput id="txtMotherName" width="25%" label="Imię matki"
                     columnName="MotherName" dataField="MOTHER_NAME" dbProvider="{getDbManager}"/>
      </c:HGroup>
      <c:HGroup width="100%" minWidth="600">
        <c:DateField id="dfBirthDate" width="120" label="Data urodzenia" columnName="BirthDate"
                     dataField="BIRTH_DATE" dbProvider="{getDbManager}" useDefaultHours="true"/>
        <c:ComboBox id="cbCustomerStatus" width="50%" label="Status kontrahenta" columnName="CustomerStatusId"
                    dataField="CUSTOMER_STATUS_ID" dbProvider="{getDbManager}"
                    descField="[Symbol] | [Name]" dbQuery="{dbStatus}"/>
        <c:ComboBox id="cbDataSource" width="50%"
                    label="Źródło pozyskiwania danych" columnName="DataSourceId"
                    dataField="DATA_SOURCE_ID" dbProvider="{getDbManager}"
                    descField="[Symbol] | [Name]" dbQuery="{dbDataSource}"/>
      </c:HGroup>
      <c:DatabaseField id="dbfParentCustomer" width="100%" label="Kontrahent nadrzędny"
                       columnName="ParentCustomerCode" dataField="PARENT_CUSTOMER_CODE" dbProvider="{getDbManager}"
                       descField="Name" history="true" idField="Code" sqlTable="Common_Customer"
                       frmClassName="pl.logicsynergy.ui.common.customer.MDICustomer"
                       />
      <c:DatabaseField id="dbfGroup1" width="100%" minWidth="600" label="Grupa podziału I"
                       columnName="GroupCustomer1Id"
                       dataExchange="{getDbfGroup1}"
                       dataField="GROUP_CUSTOMER_1_ID" dbProvider="{getDbManager}"
                       dbDescQuery="{dbGroupCustomer1}" descField ="[Name] | [Description]" idField="Id"
                       sqlTable="Common_GroupCustomer1" frmClassName="pl.logicsynergy.ui.common.FrmDictionary"
                        valueType="Integer"
                       />
      <c:DatabaseField id="dbfGroup2" width="100%" minWidth="600" label="Grupa podziału II"
                       columnName="GroupCustomer2Id"
                       dataExchange="{getDbfGroup2}"
                       dataField="GROUP_CUSTOMER_2_ID" dbProvider="{getDbManager}"
                       dbDescQuery="{dbGroupCustomer2}" descField ="[Name] | [Description]" idField="Id"
                       sqlTable="Common_GroupCustomer2" frmClassName="pl.logicsynergy.ui.common.FrmDictionary"
                        valueType="Integer"
                       />
      <c:DatabaseField id="dbfGroup3" width="100%" minWidth="600" label="Grupa podziału III"
                       columnName="GroupCustomer3Id"
                       dataExchange="{getDbfGroup3}"
                       dataField="GROUP_CUSTOMER_3_ID" dbProvider="{getDbManager}"
                       dbDescQuery="{dbGroupCustomer3}" descField ="[Name] | [Description]" idField="Id"
                       sqlTable="Common_GroupCustomer3" frmClassName="pl.logicsynergy.ui.common.FrmDictionary"
                        valueType="Integer"
                       />
      <c:DatabaseField id="dbfCustomerConsultant" width="100%" minWidth="600" label="Opiekun kontrahenta"
                       columnName="CustomerConsultantId"
                       dataExchange="{getDbfCustomerConsultant}"
                       dataField="CUSTOMER_CONSULTANT_ID" dbProvider="{getDbManager}"
                       dbDescQuery="{dbConsultant}" descField="[Symbol] | [Name]"
                       idField="Id"
                       sqlTable="Common_CustomerConsultant" frmClassName="pl.logicsynergy.ui.common.FrmDictionary"
                        valueType="Integer"
                       />

      <c:HGroup width="100%" verticalAlign="bottom">
        <c:CheckBox id="chbDataProcessingConsent" width="200" height="23"
                    label="Zgoda na przetwarzanie danych" columnName="DataProcesingConset"
                    dataField="DATA_PROCESSING_CONSENT" dbProvider="{getDbManager}" defaultValue="true"/>
        <c:CheckBox id="chbMarketingProcessingConsent" width="400" height="23"
                    label="Zgoda na przetwarzanie danych w celach marketingowych"
                    dataField="MARKETING_PROCESSING_CONSENT" dbProvider="{getDbManager}"
                    columnName="MarketingProcesingConset"
                    defaultValue="false"/>
      </c:HGroup>
      <c:TextArea id="txtaDescription" width="100%" minWidth="600" label="Opis"
                  columnName="Description"
                  dataField="DESCRIPTION" dbProvider="{getDbManager}"/>

    </c:VGroup>

